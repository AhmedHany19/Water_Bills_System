// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230320024018_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Model.Default_Slice_Value", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("char(100)");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)");

                    b.Property<decimal>("Sanitation_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Water_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Default_Slice_Values");
                });

            modelBuilder.Entity("Domain.Model.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<int>("Amount_Consumption")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Consumption_Value")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Current_Consumption_Amount")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_There_Sanitation")
                        .HasColumnType("bit");

                    b.Property<int>("Previous_Consumption_Amount")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Real_State_Id")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<decimal>("Service_Fee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Subscriber_Id")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("Subscribetion_Id")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<decimal>("Tax_Rate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Tax_Value")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total_Bill")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total_Invoice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Wastewater_Consumption_Value")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.HasKey("Id");

                    b.HasIndex("Real_State_Id");

                    b.HasIndex("Subscriber_Id");

                    b.HasIndex("Subscribetion_Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Model.Real_Estate_Type", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("real_Estate_Types");
                });

            modelBuilder.Entity("Domain.Model.Subscriber", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("Domain.Model.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Is_There_Sanitation")
                        .HasColumnType("bit");

                    b.Property<int?>("Last_Reading_Meter")
                        .HasColumnType("int");

                    b.Property<int?>("No")
                        .HasColumnType("int");

                    b.Property<string>("Real_State_Id")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("Subscriber_Id")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("Id");

                    b.HasIndex("Real_State_Id");

                    b.HasIndex("Subscriber_Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Model.Invoice", b =>
                {
                    b.HasOne("Domain.Model.Real_Estate_Type", "Real_Estate_Type")
                        .WithMany("Invoices")
                        .HasForeignKey("Real_State_Id")
                        .IsRequired();

                    b.HasOne("Domain.Model.Subscriber", "Subscriber")
                        .WithMany("Invoices")
                        .HasForeignKey("Subscriber_Id")
                        .IsRequired();

                    b.HasOne("Domain.Model.Subscription", "Subscription")
                        .WithMany("Invoices")
                        .HasForeignKey("Subscribetion_Id")
                        .IsRequired();

                    b.Navigation("Real_Estate_Type");

                    b.Navigation("Subscriber");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.Model.Subscription", b =>
                {
                    b.HasOne("Domain.Model.Real_Estate_Type", "Real_Estate_Type")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Real_State_Id")
                        .IsRequired();

                    b.HasOne("Domain.Model.Subscriber", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Subscriber_Id")
                        .IsRequired();

                    b.Navigation("Real_Estate_Type");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Domain.Model.Real_Estate_Type", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Model.Subscriber", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Model.Subscription", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
